# dice.py: Functions for rolling dice
"""Functions that simulate dice rolls.

A dice function takes no arguments and returns a number from 1 to n
(inclusive), where n is the number of sides on the dice.

Types of dice:

 -  A fair dice produces each possible outcome with equal probability.
   Two fair dice are already defined, four_sided and six_sided,
   and are generated by the make_fair_dice function.

 -  A test dice is deterministic: it always cycles through a fixed
   sequence of values that are passed as arguments.
   Test dice are generated by the make_test_dice function.
"""

from random import randint

# A fair dice produces each possible outcome with equal probability.
def make_fair_dice(sides):
    """Return a die that returns 1 to SIDES with equal chance."""
    assert type(sides) == int and sides >= 1, 'Illegal value for sides'

    def dice():
        return randint(1, sides) #randrange(start, stop+1) 对 formal parameter
    return dice


four_sided = make_fair_dice(4)
six_sided = make_fair_dice(6)

# make_fair_dice(6)  仅传递formal patameter, return 类型为function dice() , 需要参数接受
# six_sided() 相当于 dice()

def make_test_dice(*outcomes): #便于后续对 make_fair_dice DEBUG
    """Return a die that cycles deterministically through OUTCOMES.
    设置循环结果的 骰子
    formal parameter 'outcomes' 前面加一个*代表接受一个tuple
    加** 表示接受一个dict

    >>> dice = make_test_dice(1, 2, 3)
    >>> dice()
    1
    >>> dice()
    2
    >>> dice()
    3
    >>> dice()
    1
    >>> dice()
    2

    This function uses Python syntax/techniques not yet covered in this course.
    The best way to understand it is by reading the documentation and examples.
    """
    assert len(outcomes) > 0, 'You must supply outcomes to make_test_dice' # 利用assert 取代 if判断
    for o in outcomes:
        assert type(o) == int and o >= 1, 'Outcome is not a positive integer'
    index = len(outcomes) - 1  # 关于 这里-1的问题：在遍历开始时会出现 越界的情况(Python tuple的特性）
    #print("DEBUG:len(outcomes) is ", len(outcomes))
    #print("DEBUG:index is ", index)

    def dice():
        nonlocal index   #nonlocal只能在封装函数中使用，在外部函数先进行声明，在内部函数进行nonlocal声明，这样make_test_dice()和dice()内的index是同一个变量
        index = (index + 1) % len(outcomes)   # 将index 限定在[0,len(outcomes)-1]的区间     从最高位开始做 % 运算 跟输入的顺序一致EX:2%3>> 2/3=0......2 可翻阅Discrete 中关于同余的解释
        return outcomes[index]
    return dice   #返回function dice()  变量指向dice()

